<?class PaymentResponseMobikwikController extends AppController {    public function index() {                 if (!isset($this->request->data['statuscode']) || !isset($this->request->data['orderid']) || !isset($this->request->data['amount'])) {            echo "There was a problem processing your request. Contact admin@aprogift.com";            die;        }                $response_xml = $this->mobikwikCheckStatus($this->request->data['orderid']);        $orderId = $response_xml->orderid;        $amount = intval($response_xml->amount);                $orderDetails = $this->decodeMobikwikOrderId($orderId);        $clientDetails = $this->getClientDetails($orderDetails['client_id']);        $this->changeDataSourceForAll($this->getDataSourceName($clientDetails['client_db_name']));                /* save transaction for book-keeping regardless of status*/        $this->transaction->save(            array(                'order_id'=>$orderId,                'status'=>$this->request->data['statuscode'],                'created_on'=>$this->getDateTime()            )        );                $userMessage = $this->getMobikwikMessageForStatus($this->request->data['statuscode']);                        if ($response_xml->statuscode != '0') {            $redirectLink = $this->generatePaymentURL($orderDetails['id'], $orderDetails['user_type'], $orderDetails['client_id'], /*buyout*/true);        }                if ($this->request->data['statuscode'] == '0' && $response_xml->statuscode == '0') {        /* transaction successful, make the necessary changes in the DB */                        if ($orderDetails['user_type'] == "organizer") {                $organizerId = $orderDetails['id'];                $user = $this->organizer->findById($orderDetails['id']);                $user = $user['organizer'];                                $redirectURL = $this->generateTrackerURL($user['id'], $clientDetails['path'], $clientDetails['secret']);                                 if (intval($amount) == intval($user['share'])) {                /* typical (contribution) case */                    $this->organizer->id = $orderDetails['id'];                    $this->organizer->saveField('paid', 1);                                    }                else {                /* buyout case*/                    $organizer = $this->organizer->findById($orderDetails['id']);                    $organizer = $organizer['organizer'];                                        if ($organizer['paid']) {                    /* organizer doing Buyout after paying his typical contribution earlier*/                        $this->organizer->id = $orderDetails['id'];                        $this->organizer->saveField('share', $amount + $organizer['share']);                    }                    else {                    /* typical buyout, no earlier contribution from organizer */                        $this->organizer->id = $orderDetails['id'];                        $this->organizer->saveField('share', $amount);                        $this->organizer->saveField('paid', 1);                    }                                    /* set all unpaid groupUsers to 0*/                    $groupGift = $this->getCompleteGroupGift($orderDetails['id']);                    $organizerDetails = $this->getOrganizerDetails($groupGift);                    $groupUsersDetails = $this->getGroupUsersDetails($groupGift);                    $giftDetails = $this->getGiftDetails($groupGift);                                        $amountLeft = $this->getTotalLeft($organizerDetails, $groupUsersDetails, $giftDetails);                                        if ($amountLeft == 0) {                    /* this will always happen in a buyout , amount left unpaid = 0*/                        foreach ($groupUsersDetails as &$groupUser) {                            if (!$groupUser['paid']) {                                $this->group_user->create(false);                                $this->group_user->id = $groupUser['id'];                                $this->group_user->saveField('share', 0);                            }                        }                    }                    else {                    /*this will never happen in a normal flow as, in a buyout, amount left unpaid will be ZERO*/                    /* this code is just in case*/                                        /* Non zero amount left, distribute evenly*/                        $numUsersNotPaid = $this->getNotPaidCountGroupUsers($groupUsersDetails);                        $share = intval($amountLeft/$numUsersNotPaid);                                                /* for uneven distribution e.g, 100 divided in 3 people gives 33 each, but one person has to pay 34 */                        $extraShare = $amountLeft - $share*($numUsersNotPaid-1);                        $extraShareDistributed = false;                                                foreach ($groupUsersDetails as $groupUser) {                            if (!$groupUser['paid']) {                                if (!$extraShareDistributed) {                                    $thisShare = $extraShare;                                    $extraShareDistributed = true;                                }                                else {                                    $thisShare = $share;                                }                                                                $this->group_user->create(false);                                $this->group_user->id = $groupUser['id'];                                $this->group_user->saveField('share', $thisShare);                                                            }                        }                                            }                }                            }            else if ($orderDetails['user_type'] == "group_user") {                $user = $this->group_user->findById($orderDetails['id']);                $user = $user['group_user'];                $organizerId = $user['organizer_id'];                                $redirectURL = $this->generateInviteeURL($orderDetails['id'], $clientDetails['path'], $clientDetails['secret']);                                if ($amount == intval($user['share'])) {                /* This will always happen */                    $this->group_user->id = $orderDetails['id'];                    $this->group_user->saveField('paid', 1);                                                       }                else {                /* this will never happen , but if it happens, we have to acknowledge the payment, and change shares accordingly */                    $this->group_user->id = $orderDetails['id'];                    $this->group_user->saveField('share', $amount);                    $this->group_user->saveField('paid', 1);                                    $userMessage = "There was a mismatch between your share and the amount you paid. Contact admin@aprogift.com <br />" . $userMessage;                   }            }            else {                $this->putError(true);            }        }                if ($this->isGroupGiftComplete($organizerId)) {            $this->finalizeGroupGift($organizerId);         }                $this->set('message', $userMessage);        $this->set('redirectURL', $redirectURL);            }    }?>